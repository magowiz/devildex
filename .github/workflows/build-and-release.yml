name: Build and Release All Artifacts

on:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  build-linux-wheel:
    name: Build Linux Wheel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install Poetry
        run: pip install poetry
      - name: Install toml library
        run: pip install toml
      - name: Generate platform-specific pyproject.toml
        run: |
          python scripts/generate_pyproject_toml.py pyproject.toml ${{ runner.os }} > pyproject.toml.tmp
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv -Force pyproject.toml.tmp pyproject.toml
          else
            mv -f pyproject.toml.tmp pyproject.toml
          fi
      - name: Install Poetry and Export Plugin
        run: |
          export PATH="/home/runner/.poetry/bin:$PATH"
          poetry self add poetry-plugin-export
      - name: Install system dependencies for wxPython
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libxtst-dev libnotify-dev \
          python3-gi \
          python3-gi-cairo \
          python3-wxgtk4.0 \
          python3-wxgtk-webview4.0
      - name: Install dependencies with pip
        env:
          PIP_FIND_LINKS: "https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-24.04/"
        run: |
          poetry lock
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          pip install -r requirements.txt
      - name: Build wheel
        run: poetry build --format wheel
      - name: Upload Linux Wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: devildex-linux-wheel-artifact
          path: dist/*.whl

  build-macos-wheel:
    name: Build macOS Wheel
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install toml library
        run: pip install toml
      - name: Generate platform-specific pyproject.toml
        run: |
          python scripts/generate_pyproject_toml.py pyproject.toml ${{ runner.os }} > pyproject.toml.tmp
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv -Force pyproject.toml.tmp pyproject.toml
          else
            mv -f pyproject.toml.tmp pyproject.toml
          fi
      - name: Install Poetry and Export Plugin
        run: |
          pip install poetry
          export PATH="/Users/runner/.poetry/bin:$PATH"
          poetry build --format wheel
      - name: Upload Wheel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: devildex-macos-wheel-artifact
          path: dist/*.whl

  build-windows-wheel:
    name: Build Windows Wheel
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install toml library
        run: python -m pip install toml
      - name: Generate platform-specific pyproject.toml
        run: |
          python scripts/generate_pyproject_toml.py pyproject.toml ${{ runner.os }} > pyproject.toml.tmp
          mv -Force pyproject.toml.tmp pyproject.toml
      - name: Install Poetry
        run: python -m pip install poetry
      - name: Add Poetry to PATH
        run: echo "$HOME/AppData/Local/pypoetry/Cache/virtualenvs/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Build Wheel
        run: poetry build --format wheel
      - name: Upload Wheel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: devildex-windows-wheel-artifact
          path: dist/*.whl

  build-deb-package:
    name: Build Debian Package
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install toml library
        run: pip install toml
      - name: Generate platform-specific pyproject.toml
        run: |
          python scripts/generate_pyproject_toml.py pyproject.toml ${{ runner.os }} > pyproject.toml.tmp
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv -Force pyproject.toml.tmp pyproject.toml
          else
            mv -f pyproject.toml.tmp pyproject.toml
          fi
      - name: Install Poetry
        run: pip install poetry
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev debhelper build-essential python3-all python3-poetry-core dh-python python3-sphinx python3-pip
      - name: Remove Makefile to prevent conflicts
        run: rm -f Makefile
      - name: Build Debian package
        run: |
          cp -r packaging/debian .
          dpkg-buildpackage -us -uc
          mkdir -p dist/deb
          mv ../*.deb dist/deb/
      - name: Upload Debian Package artifact
        uses: actions/upload-artifact@v4
        with:
          name: devildex-debian-package
          path: dist/deb/*.deb

  build-package:
    name: Build Pyinstaller Pkg
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install Poetry
        run: pip install poetry
      - name: Install toml library
        run: pip install toml
      - name: Generate platform-specific pyproject.toml (Windows)
        if: runner.os == 'Windows'
        run: |
          python scripts/generate_pyproject_toml.py pyproject.toml ${{ runner.os }} > pyproject.toml.tmp
          mv -Force pyproject.toml.tmp pyproject.toml
      - name: Generate platform-specific pyproject.toml (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          python scripts/generate_pyproject_toml.py pyproject.toml ${{ runner.os }} > pyproject.toml.tmp
          mv -f pyproject.toml.tmp pyproject.toml
      - name: Install wxPython (Windows & macOS)
        if: runner.os == 'Windows' || runner.os == 'macOS'
        run: pip install wxpython==4.2.3
      - name: Install OS-specific dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnotify-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libxtst-dev \
            xvfb \
            libegl1 \
            python3-gi \
            python3-gi-cairo \
            python3-wxgtk4.0 \
            python3-wxgtk-webview4.0
      - name: Install Poetry and dependencies
        run: |
          poetry self add poetry-plugin-export
          poetry export -f requirements.txt --output requirements.tmp && grep -v "wxPython" requirements.tmp > requirements.txt && rm requirements.tmp
          pip install pyinstaller
      - name: Build Package (Windows)
        if: runner.os == 'Windows'
        run: pyinstaller --log-level=DEBUG packaging/pyinstaller/specs/devildex_windows.spec --distpath dist/${{ matrix.os }}
      - name: Build Package (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            pyinstaller --log-level=DEBUG packaging/pyinstaller/specs/devildex_macos.spec --distpath dist/${{ matrix.os }}
          elif [ "${{ runner.os }}" == "Linux" ]; then
            pyinstaller --log-level=DEBUG packaging/pyinstaller/specs/devildex_linux.spec --distpath dist/${{ matrix.os }}
          fi
      - name: Upload Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: devildex-${{ runner.os }}-bundle
          path: dist/${{ matrix.os }}/

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install toml library
        run: pip install toml
      - name: Generate platform-specific pyproject.toml
        run: |
          python scripts/generate_pyproject_toml.py pyproject.toml ${{ runner.os }} > pyproject.toml.tmp
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv -Force pyproject.toml.tmp pyproject.toml
          else
            mv -f pyproject.toml.tmp pyproject.toml
          fi
      - name: Install Poetry and Export Plugin
        run: |
          pip install poetry
          poetry self add poetry-plugin-export
      - name: Install system dependencies for wxPython
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libxtst-dev libnotify-dev \
          python3-gi \
          python3-gi-cairo \
          python3-wxgtk4.0 \
          python3-wxgtk-webview4.0
      - name: Install dependencies and project
        env:
          PIP_FIND_LINKS: "https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-24.04/"
        run: |
          poetry lock
          poetry export --with doc -f requirements.txt --output requirements.txt --without-hashes
          pip install -r requirements.txt
          pip install -e .
      - name: Build documentation with user script
        run: |
          chmod +x generate_sphinx_doc.sh
          ./generate_sphinx_doc.sh
      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: devildex-documentation-artifact
          path: "build/html"

  deploy-docs:
    name: Deploy Documentation to GitHub Pages
    needs: build-docs
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: devildex-documentation-artifact
          path: "build/html"
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "build/html"
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build-rpm-package:
    name: Build RPM Package
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate platform-specific pyproject.toml
        run: |
          dnf update && dnf install python
          cp pyproject.toml pyproject.toml.bak
          python scripts/generate_pyproject_toml.py pyproject.toml ${{ runner.os }} > pyproject.toml.tmp
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv -Force pyproject.toml.tmp pyproject.toml
          else
            mv -f pyproject.toml.tmp pyproject.toml
          fi
      - name: Install RPM build tools and Python packages
        run: |
          dnf install -y rpm-build rpmlint python3-devel python3-setuptools python3-pip python3-wheel pyproject-rpm-macros poetry
          python -m pip install toml
      - name: Check Python versions
        run: |
          which python python3
          python3 --version
      - name: Create source tarball
        run: |
          mkdir -p ~/rpmbuild/SOURCES/
          poetry build --format sdist
          mv dist/*.tar.gz ~/rpmbuild/SOURCES/
      - name: Restore original pyproject.toml
        if: always()
        run: mv pyproject.toml.bak pyproject.toml
      - name: Build RPM package
        run: |
          VERSION=$(poetry version --short)
          rpmbuild -ba packaging/rpm/devildex.spec --define "version $VERSION"
      - name: Upload RPM Package artifact
        uses: actions/upload-artifact@v4
        with:
          name: devildex-rpm-package
          path: ~/rpmbuild/RPMS/noarch/*.rpm

  create-and-upload-release:
    name: Create and Upload Release
    runs-on: ubuntu-latest
    needs:
      - build-windows-wheel
      - build-package
      - build-linux-wheel
      - build-macos-wheel
      - build-deb-package
      - build-rpm-package
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Calculate Next Version
        id: calculate_version
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          RELEASE_TYPE=$(echo "$COMMIT_MESSAGE" | grep -oP 'release\(\K(patch|minor|major)(?=\)\:)' | head -1)
          if [[ -z "$RELEASE_TYPE" ]]; then
            echo "No release type found. Skipping release."
            echo "next_version=null" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          CURRENT_VERSION=$(grep -oP 'version = "\K[0-9]+\.[0-9]+\.[0-9]+' pyproject.toml | head -1)
          IFS='.' read -r -a V <<< "$CURRENT_VERSION"
          major=${V[0]}; minor=${V[1]}; patch=${V[2]}
          if [[ "$RELEASE_TYPE" == "major" ]]; then major=$((major + 1)); minor=0; patch=0;
          elif [[ "$RELEASE_TYPE" == "minor" ]]; then minor=$((minor + 1)); patch=0;
          elif [[ "$RELEASE_TYPE" == "patch" ]]; then patch=$((patch + 1)); fi
          NEXT_VERSION="$major.$minor.$patch"
          echo "Calculated next version: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> "$GITHUB_OUTPUT"
      - name: Download all artifacts
        if: steps.calculate_version.outputs.next_version != 'null'
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Display downloaded artifacts structure
        if: steps.calculate_version.outputs.next_version != 'null'
        run: ls -R dist
      - name: Create Release
        id: create_release
        if: steps.calculate_version.outputs.next_version != 'null'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.calculate_version.outputs.next_version }}
          release_name: Release v${{ steps.calculate_version.outputs.next_version }}
          body: "Release v${{ steps.calculate_version.outputs.next_version }}"
          draft: false
          prerelease: false
      - name: Upload Release Assets
        if: steps.calculate_version.outputs.next_version != 'null'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          find dist -type f -print0 | while IFS= read -r -d $'\0' file; do
            echo "Uploading asset: $file"
            gh release upload v${{ steps.calculate_version.outputs.next_version }} "$file"
          done