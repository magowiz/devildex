# .github/workflows/publish-docs.yml
name: Publish Documentation

on:
  push:
    branches:
      - master

# Permissions needed to deploy to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Ensures that only one deployment is running at a time
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    name: Build and Deploy Docs
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    # Use Ubuntu 24.04 to match the Jenkins environment and ensure wxPython wheel compatibility.
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Poetry and Export Plugin
        run: |
          pip install poetry
          poetry self add poetry-plugin-export

      - name: Install system dependencies for wxPython
        # This step is CRUCIAL. wxPython requires GTK+ system libraries
        # to be compiled or installed correctly.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libxtst-dev libnotify-dev

      - name: Install dependencies with pip
        env:
          # Use the exact find-links URL from Jenkinsfile to get pre-compiled wxPython wheels
          # and avoid a lengthy compilation. This requires the ubuntu-24.04 runner.
          PIP_FIND_LINKS: "https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-24.04/"
        run: |
          # Export dependencies (including doc group) from poetry.lock to use pip.
          # This is more reliable for wxPython than `poetry install`.
          poetry export --with doc -f requirements.txt --output requirements.txt --without-hashes
          pip install -r requirements.txt

      - name: Build documentation with Sphinx
        # This step replicates the logic from the `generate_sphinx_doc.sh` script
        # and the Jenkins `pythonGenerateDocsSphinx` function.
        run: |
          # 1. Auto-generate API documentation from docstrings in the 'src' directory.
          sphinx-apidoc -f -M -o docs/source src
          # 2. Build the HTML using the Makefile in the 'docs' directory.
          make -C docs html

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          # The Makefile in 'docs' creates the output in 'docs/build/html'
          path: 'docs/build/html'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4