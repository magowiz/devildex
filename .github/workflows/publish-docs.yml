# .github/workflows/publish-docs.yml
name: Publish Documentation

on:
  workflow_run:
    workflows: ["Python Tests"]
    types: [completed]

# Permissions for the workflow
permissions:
  contents: read

# Ensures that only one deployment is running at a time
concurrency:
  group: "docs"
  cancel-in-progress: true

jobs:
  build-docs:
    name: Build Documentation
    # Use Ubuntu 24.04 to match the Jenkins environment and ensure wxPython wheel compatibility.
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry and Export Plugin
        run: |
          pip install poetry
          poetry self add poetry-plugin-export

      - name: Install system dependencies for wxPython
        # This step is CRUCIAL. wxPython requires GTK+ system libraries
        # to be compiled or installed correctly.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libxtst-dev libnotify-dev libsdl2-dev \
          python3-gi \
          python3-gi-cairo \
          python3-wxgtk4.0 \
          python3-wxgtk-webview4.0

      - name: Install dependencies and project
        env:
          # Use the exact find-links URL from Jenkinsfile to get pre-compiled wxPython wheels
          # and avoid a lengthy compilation. This requires the ubuntu-24.04 runner.
          PIP_FIND_LINKS: "https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-24.04/"
        run: |
          # Export dependencies (including doc group) from poetry.lock to use pip.
          poetry export --with doc -f requirements.txt --output requirements.txt --without-hashes
          pip install -r requirements.txt
          # Install the project itself so Sphinx can find and document it.
          pip install -e .

      - name: Build documentation with user script
        run: |
          chmod +x generate_sphinx_doc.sh
          ./generate_sphinx_doc.sh

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-html
          path: "build/html"

  deploy-docs:
    name: Deploy Documentation to GitHub Pages
    needs: build-docs
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation-html
          path: "build/html"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "build/html"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
