# .github/workflows/python-tests.yml
name: Python Tests

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  test:
    # NOTE: Conditional execution based on commit message (e.g., skip if [lint])
    # is handled by the megalinter workflow itself or can be added back later
    # using more robust path filtering if needed.
    runs-on: ubuntu-24.04 # Use Ubuntu 24.04 to match Jenkins environment for wxPython


    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install Poetry
      run: pip install poetry

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libxtst-dev \
          xvfb \
          bzr

    - name: Configure Poetry and install dependencies
      env:
        # Use the exact find-links URL from Jenkinsfile to get pre-compiled wxPython wheels
        # and avoid a lengthy compilation. This requires the ubuntu-24.04 runner.
        PIP_FIND_LINKS: "https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-24.04/"
      run: |
        poetry config virtualenvs.in-project true
        poetry install --with test

    - name: Setup Bazaar and Launchpad credentials
      env:
        # Create a repository secret named LAUNCHPAD_ID_CONF_FILE
        # with the content of your configuration file.
        LAUNCHPAD_CONFIG_FILE_CONTENT: ${{ secrets.LAUNCHPAD_ID_CONF_FILE }}
      run: |
        mkdir -p ~/.bazaar/
        echo "${LAUNCHPAD_CONFIG_FILE_CONTENT}" > ~/.bazaar/launchpad.conf
        echo "Launchpad config file created."

    - name: Run tests with Xvfb
      # The Jenkinsfile uses a custom function 'pyTestXvfb'. This is the standard
      # equivalent on Linux, as GitHub runners have Xvfb pre-installed.
      # The --html and --cov flags generate reports that we then upload as artifacts.
      run: |
        xvfb-run poetry run pytest --verbose \
          --cov=src \
          --cov-report=xml \
          --cov-report=html:coverage_report \
          --html=test_report/index.html \
          --junitxml=test-results.xml

    - name: Upload Test Report (HTML)
      # Always run this step, even if tests fail, to see the report.
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-report-html
        path: test_report/

    - name: Upload Coverage Report (HTML)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-html
        path: coverage_report/

    - name: Upload Screenshots on failure
      if: failure() # Only run if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: test-screenshots
        path: screenshots/
        if-no-files-found: ignore # Don't fail if there are no screenshots

    - name: Upload Coverage Report (XML for SonarQube)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-xml
        path: coverage.xml
        if-no-files-found: ignore

    - name: Upload Test Results (XML for SonarQube)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-xml
        path: test-results.xml
        if-no-files-found: ignore