name: Release Workflow

on:
  workflow_run:
    workflows:
      - "Build Linux Python Wheel"
      - "Build macOS Wheel"
      - "Build Windows Wheel"
      - "Package Desktop Application"
      - "Publish Documentation"
      - "Python Tests"
    types:
      - completed

jobs:
  release:
    runs-on: ubuntu-latest # Start with ubuntu-latest for initial setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necessary to fetch all history for tags
        token: ${{ secrets.GITHUB_TOKEN }} # Automatically provided GitHub token

    - name: Configure Git
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"

    - name: Debug pyproject.toml files
      run: |
        echo "Listing pyproject.toml files:"
        find . -name "pyproject.toml*"
        echo "Content of main pyproject.toml:"
        cat pyproject.toml

    - name: Get latest commit message
      id: commit_message
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "MESSAGE=\"$COMMIT_MSG\"" >> $GITHUB_OUTPUT

    - name: Determine version increment
      id: version_increment
      run: |
        COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
        echo "Debug: COMMIT_MESSAGE is '$COMMIT_MESSAGE'"
        INCREMENT_TYPE=""
        if [[ "$COMMIT_MESSAGE" == "release(patch):"* ]]; then
          INCREMENT_TYPE="patch"
          echo "Debug: Matched patch. INCREMENT_TYPE is '$INCREMENT_TYPE'"
        elif [[ "$COMMIT_MESSAGE" == "release(minor):"* ]]; then
          INCREMENT_TYPE="minor"
          echo "Debug: Matched minor. INCREMENT_TYPE is '$INCREMENT_TYPE'"
        elif [[ "$COMMIT_MESSAGE" == "release(major):"* ]]; then
          INCREMENT_TYPE="major"
          echo "Debug: Matched major. INCREMENT_TYPE is '$INCREMENT_TYPE'"
        fi
        echo "INCREMENT_TYPE=\"$INCREMENT_TYPE\"" >> $GITHUB_OUTPUT
        echo "Found increment type: \"$INCREMENT_TYPE\""

    - name: Fail if no increment type found
      if: steps.version_increment.outputs.INCREMENT_TYPE == ''
      run: |
        echo "Commit message does not contain a valid release type (e.g., 'release(patch):', 'release(minor):', 'release(major):')."
        exit 0

    - name: Set up Python 3.13
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install jq
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Install Poetry
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: pip install poetry

    - name: Get Linux Wheel Workflow Run ID
      id: get_linux_wheel_run_id
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: |
        REPO_OWNER="${{ github.repository_owner }}"
        REPO_NAME="${{ github.event.repository.name }}"
        COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
        WORKFLOW_ID="191214300" # ID for "Build Linux Python Wheel"

        echo "Searching for Linux Wheel workflow run for commit SHA: ${COMMIT_SHA}"

        RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/actions/runs?workflow_id=${WORKFLOW_ID}&head_sha=${COMMIT_SHA}&status=success&per_page=1")

        RUN_ID=$(echo "${RESPONSE}" | jq -r '.workflow_runs[0].id')

        if [ "${RUN_ID}" != "null" ]; then
          echo "Found Linux Wheel workflow run ID: ${RUN_ID}"
          echo "run_id=${RUN_ID}" >> "$GITHUB_OUTPUT"
        else
          echo "No successful Linux Wheel workflow run found for commit SHA: ${COMMIT_SHA}"
          echo "run_id=" >> "$GITHUB_OUTPUT"
          exit 1
        fi

    - name: Debug Poetry Version
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: |
        echo "Current Poetry version: $(poetry version --short)"
        echo "Increment type: ${{ steps.version_increment.outputs.INCREMENT_TYPE }}"

    - name: Get macOS Wheel Workflow Run ID
      id: get_macos_wheel_run_id
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: |
        REPO_OWNER="${{ github.repository_owner }}"
        REPO_NAME="${{ github.event.repository.name }}"
        COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
        WORKFLOW_ID="191156713" # ID for "Build macOS Wheel"

        echo "Searching for macOS Wheel workflow run for commit SHA: ${COMMIT_SHA}"

        RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/actions/runs?workflow_id=${WORKFLOW_ID}&head_sha=${COMMIT_SHA}&status=success&per_page=1")

        RUN_ID=$(echo "${RESPONSE}" | jq -r '.workflow_runs[0].id')

        if [ "${RUN_ID}" != "null" ]; then
          echo "Found macOS Wheel workflow run ID: ${RUN_ID}"
          echo "run_id=${RUN_ID}" >> "$GITHUB_OUTPUT"
        else
          echo "No successful macOS Wheel workflow run found for commit SHA: ${COMMIT_SHA}"
          echo "run_id=" >> "$GITHUB_OUTPUT"
          exit 1
        fi

    - name: Bump version with Poetry
      id: new_version
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: |
        poetry version ${{ steps.version_increment.outputs.INCREMENT_TYPE }}
        NEW_VERSION=$(poetry version --short)
        echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version set to: $NEW_VERSION"

    - name: Get Windows Wheel Workflow Run ID
      id: get_windows_wheel_run_id
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: |
        REPO_OWNER="${{ github.repository_owner }}"
        REPO_NAME="${{ github.event.repository.name }}"
        COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
        WORKFLOW_ID="191156714" # ID for "Build Windows Wheel"

        echo "Searching for Windows Wheel workflow run for commit SHA: ${COMMIT_SHA}"

        RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/actions/runs?workflow_id=${WORKFLOW_ID}&head_sha=${COMMIT_SHA}&status=success&per_page=1")

        RUN_ID=$(echo "${RESPONSE}" | jq -r '.workflow_runs[0].id')

        if [ "${RUN_ID}" != "null" ]; then
          echo "Found Windows Wheel workflow run ID: ${RUN_ID}"
          echo "run_id=${RUN_ID}" >> "$GITHUB_OUTPUT"
        else
          echo "No successful Windows Wheel workflow run found for commit SHA: ${COMMIT_SHA}"
          echo "run_id=" >> "$GITHUB_OUTPUT"
          exit 1
        fi

    - name: Create artifacts directory
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: mkdir -p artifacts/wheels artifacts/bundles artifacts/docs

    - name: Get Desktop Application Workflow Run ID
      id: get_desktop_app_run_id
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: |
        REPO_OWNER="${{ github.repository_owner }}"
        REPO_NAME="${{ github.event.repository.name }}"
        COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
        WORKFLOW_ID="191156271" # ID for "Package Desktop Application"

        echo "Searching for Desktop Application workflow run for commit SHA: ${COMMIT_SHA}"

        RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/actions/runs?workflow_id=${WORKFLOW_ID}&head_sha=${COMMIT_SHA}&status=success&per_page=1")

        RUN_ID=$(echo "${RESPONSE}" | jq -r '.workflow_runs[0].id')

        if [ "${RUN_ID}" != "null" ]; then
          echo "Found Desktop Application workflow run ID: ${RUN_ID}"
          echo "run_id=${RUN_ID}" >> "$GITHUB_OUTPUT"
        else
          echo "No successful Desktop Application workflow run found for commit SHA: ${COMMIT_SHA}"
          echo "run_id=" >> "$GITHUB_OUTPUT"
          exit 1
        fi





    - name: Current Poetry Version
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: poetry version --short

    - name: Get Documentation Workflow Run ID
      id: get_docs_run_id
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: |
        REPO_OWNER="${{ github.repository_owner }}"
        REPO_NAME="${{ github.event.repository.name }}"
        COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
        WORKFLOW_ID="178744583" # ID for "Publish Documentation"

        echo "Searching for Documentation workflow run for commit SHA: ${COMMIT_SHA}"

        RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/actions/runs?workflow_id=${WORKFLOW_ID}&head_sha=${COMMIT_SHA}&status=success&per_page=1")

        RUN_ID=$(echo "${RESPONSE}" | jq -r '.workflow_runs[0].id')

        if [ "${RUN_ID}" != "null" ]; then
          echo "Found Documentation workflow run ID: ${RUN_ID}"
          echo "run_id=${RUN_ID}" >> "$GITHUB_OUTPUT"
        else
          echo "No successful Documentation workflow run found for commit SHA: ${COMMIT_SHA}"
          echo "run_id=" >> "$GITHUB_OUTPUT"
          exit 1
        fi


    - name: Commit version bump
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: |
        git add pyproject.toml
        git commit -m "chore: Release v\"${{ steps.new_version.outputs.VERSION }}\"" || true

    - name: Delete existing GitHub Release (if any)
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: |
        export GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
        gh release delete v${{ steps.new_version.outputs.VERSION }} --yes || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Ensure GH_TOKEN is available for gh CLI

    - name: Delete existing Git tag (if any)
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: |
        git push --delete origin v${{ steps.new_version.outputs.VERSION }} || true
        git push --delete github v${{ steps.new_version.outputs.VERSION }} || true

    - name: Create Git tag
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: git tag v${{ steps.new_version.outputs.VERSION }}

    - name: Push changes and tag
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: |
        git push origin master -f
        git push origin v${{ steps.new_version.outputs.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



    - name: Download Windows Wheel artifact
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      uses: actions/download-artifact@v4
      with:
        run-id: ${{ steps.get_windows_wheel_run_id.outputs.run_id }}
        repository: ${{ github.repository }}

    - name: Download macOS Wheel artifact
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      uses: actions/download-artifact@v4
      with:
        name: devildex-macos-wheel
        path: artifacts/wheels/macos
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ steps.get_macos_wheel_run_id.outputs.run_id }}
        repository: ${{ github.repository }}

    - name: Download Linux Wheel artifact
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      uses: actions/download-artifact@v4
      with:
        run-id: ${{ steps.get_linux_wheel_run_id.outputs.run_id }}
        repository: ${{ github.repository }}

    - name: Download Windows PyInstaller bundle
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      uses: actions/download-artifact@v4
      with:
        name: devildex-windows-latest-build
        path: artifacts/bundles/windows
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ steps.get_desktop_app_run_id.outputs.run_id }}
        repository: ${{ github.repository }}

    - name: Download macOS PyInstaller bundle
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      uses: actions/download-artifact@v4
      with:
        name: devildex-macos-latest-build
        path: artifacts/bundles/macos
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ steps.get_desktop_app_run_id.outputs.run_id }}
        repository: ${{ github.repository }}

    - name: Download Linux PyInstaller bundle
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      uses: actions/download-artifact@v4
      with:
        name: devildex-ubuntu-latest-build
        run-id: ${{ steps.get_desktop_app_run_id.outputs.run_id }}
        repository: ${{ github.repository }}

    - name: Download documentation artifact
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      uses: actions/download-artifact@v4
      with:
        name: documentation-html
        path: artifacts/docs
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ steps.get_docs_run_id.outputs.run_id }}
        repository: ${{ github.repository }}

    - name: Zip documentation
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: |
        cd artifacts/docs
        zip -r devildex_documentation.zip ./*
        mv devildex_documentation.zip ../
        cd ../..

    - name: List Artifacts Directory (after download)
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      run: ls -R artifacts/

    - name: Create GitHub Release
      if: ${{ steps.version_increment.outputs.INCREMENT_TYPE != '' }}
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.new_version.outputs.VERSION }}
        name: Release v${{ steps.new_version.outputs.VERSION }}
        body: |
          Automated release for version v${{ steps.new_version.outputs.VERSION }}
          
          ${{ github.event.workflow_run.head_commit.message }}
        draft: false
        prerelease: false
        files: |
          artifacts/wheels/windows/*.whl
          artifacts/wheels/macos/*.whl
          artifacts/wheels/linux/*.whl
          artifacts/bundles/windows/devildex_windows/*
          artifacts/bundles/macos/devildex_macos/*
          artifacts/bundles/linux/devildex_linux/*
          artifacts/devildex_documentation.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
