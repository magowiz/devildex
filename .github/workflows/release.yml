name: Release Workflow

on:
  workflow_run:
    workflows:
      - "Build Linux Python Wheel"
      - "Build macOS Wheel"
      - "Build Windows Wheel"
      - "Package Desktop Application"
      - "Publish Documentation"
      - "Python Tests"
    types:
      - completed

jobs:
  release:
    runs-on: ubuntu-latest # Start with ubuntu-latest for initial setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necessary to fetch all history for tags
        token: ${{ secrets.GITHUB_TOKEN }} # Automatically provided GitHub token

    - name: Configure Git
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"

    - name: Get latest commit message
      id: commit_message
      run: echo "MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

    - name: Determine version increment
      id: version_increment
      run: |
        COMMIT_MESSAGE="${{ github.event.workflow_run.head_commit.message }}"
        INCREMENT_TYPE=""
        if [[ "$COMMIT_MESSAGE" == "release(patch):"* ]]; then
          INCREMENT_TYPE="patch"
        elif [[ "$COMMIT_MESSAGE" == "release(minor):"* ]]; then
          INCREMENT_TYPE="minor"
        elif [[ "$COMMIT_MESSAGE" == "release(major):"* ]]; then
          INCREMENT_TYPE="major"
        fi
        echo "INCREMENT_TYPE=$INCREMENT_TYPE" >> $GITHUB_OUTPUT
        echo "Found increment type: $INCREMENT_TYPE"

    - name: Fail if no increment type found
      if: steps.version_increment.outputs.INCREMENT_TYPE == ''
      run: |
        echo "Error: Commit message does not contain a valid release type (e.g., 'release(patch):', 'release(minor):', 'release(major):')."
        exit 1

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install Poetry
      run: pip install poetry

    - name: Increment version with Poetry
      run: poetry version ${{ steps.version_increment.outputs.INCREMENT_TYPE }}

    - name: Get new version
      id: new_version
      run: echo "VERSION=$(poetry version --short)" >> $GITHUB_OUTPUT

    - name: Commit version bump
      run: |
        git add pyproject.toml
        git commit -m "chore: Release v${{ steps.new_version.outputs.VERSION }}"

    - name: Create Git tag
      run: git tag v${{ steps.new_version.outputs.VERSION }}

    - name: Push changes and tag
      run: |
        git push origin master
        git push origin v${{ steps.new_version.outputs.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

    - name: Download Windows Wheel artifact
      uses: actions/download-artifact@v4
      with:
        name: devildex-windows-wheel
        path: artifacts/wheels/windows
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Download macOS Wheel artifact
      uses: actions/download-artifact@v4
      with:
        name: devildex-macos-wheel
        path: artifacts/wheels/macos
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Download Linux Wheel artifact
      uses: actions/download-artifact@v4
      with:
        name: devildex-linux-wheel
        path: artifacts/wheels/linux
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Download Windows PyInstaller bundle
      uses: actions/download-artifact@v4
      with:
        name: devildex-windows-latest-build
        path: artifacts/bundles/windows
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Download macOS PyInstaller bundle
      uses: actions/download-artifact@v4
      with:
        name: devildex-macos-latest-build
        path: artifacts/bundles/macos
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Download Linux PyInstaller bundle
      uses: actions/download-artifact@v4
      with:
        name: devildex-ubuntu-latest-build
        path: artifacts/bundles/linux
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Download documentation artifact
      uses: actions/download-artifact@v4
      with:
        name: documentation-html
        path: artifacts/docs
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.new_version.outputs.VERSION }}
        name: Release v${{ steps.new_version.outputs.VERSION }}
        body: |
          Automated release for version v${{ steps.new_version.outputs.VERSION }}
          
          ${{ github.event.workflow_run.head_commit.message }}
        draft: false
        prerelease: false
        files: |
          artifacts/wheels/windows/*.whl
          artifacts/wheels/macos/*.whl
          artifacts/wheels/linux/*.whl
          artifacts/bundles/windows/devildex_windows/*
          artifacts/bundles/macos/devildex_macos/*
          artifacts/bundles/linux/devildex_linux/*
          artifacts/docs/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}