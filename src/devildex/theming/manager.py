"""theme manager module."""

import ast
import logging
import shutil
from pathlib import Path
from typing import Optional

from devildex.info import PROJECT_ROOT

DEVILDEX_THEMING_ASSETS_PATH = (
    PROJECT_ROOT / "src" / "devildex" / "theming" / "common_assets"
)
LIVE_RELOAD_JS_PATH = DEVILDEX_THEMING_ASSETS_PATH / "live_reload.js"
SPHINX_LAYOUT_TEMPLATE_PATH = DEVILDEX_THEMING_ASSETS_PATH / "sphinx_layout.html"

logger = logging.getLogger(__name__)
CONF_FILENAME = "conf.py"


class ThemeManager:
    """Class that implements themes."""

    def __init__(
        self,
        project_path: Path,
        doc_type: str,
        sphinx_conf_file: Optional[Path] = None,
        mkdocs_yml_file: Optional[Path] = None,
    ) -> None:
        """Initialize ThemeManager."""
        self.project_path = project_path
        self.doc_type = doc_type
        self.sphinx_conf_file = sphinx_conf_file
        self.mkdocs_yml_file = mkdocs_yml_file
        theme_container_dir = PROJECT_ROOT / "src" / "devildex" / "theming" / "sphinx"
        self.settings = {
            "html_theme": "devildex_sphinx_theme",
            "html_theme_path": [str(theme_container_dir.resolve())],
            "pygments_style": "tango",
        }
        self.potential_sphinx_conf_paths = [
            self.project_path / CONF_FILENAME,
            self.project_path / "source" / CONF_FILENAME,
            self.project_path / "docs" / CONF_FILENAME,
            self.project_path / "doc" / CONF_FILENAME,
        ]

    @staticmethod
    def _get_value_from_ast(tree: ast.AST, key: str) -> str:
        """Analyze the syntactic tree (AST) to find a value.

        Args:
            tree: the AST object generated by the parsing of the conf.py file.
            key: Key to Search

        Returns:
            The name of the original theme as a string if found, otherwise "unknown".

        """
        for node in ast.walk(tree):
            if (
                (
                    isinstance(node, ast.Assign)
                    and len(node.targets) == 1
                    and isinstance(node.targets[0], ast.Name)
                    and node.targets[0].id == key
                )
                and isinstance(node.value, ast.Constant)
                and isinstance(
                    node.value.value,
                    str,
                )
            ):
                return node.value.value
        return "unknown"

    def mkdocs_apply_customizations(self, config: dict) -> dict:
        """Apply DevilDex theme customizations to an MkDocs config dictionary."""
        if self.doc_type != "mkdocs":
            logger.warning(
                "ThemeManager: Attempted to apply MkDocs customizations on a non-mkdocs project."
            )
            return config

        logger.info(
            "ThemeManager: Applying MkDocs theme customizations to config dict."
        )

        theme_dir_abs = (
            PROJECT_ROOT / "src" / "devildex" / "theming" / "devildex_mkdocs_theme"
        ).resolve()

        if not theme_dir_abs.is_dir():
            logger.warning(
                "ThemeManager: DevilDex MkDocs theme assets not found at %s. "
                "Skipping 'custom_dir' injection.",
                theme_dir_abs,
            )
            return config
        logger.info(
            "ThemeManager: Patched config with 'custom_dir': '%s'",
            str(theme_dir_abs),
        )
        return config

    @staticmethod
    def _get_list_from_ast(tree: ast.AST, key: str) -> list[str]:
        """Analyze the syntactic tree (AST) to find a value.

        Args:
            tree: the AST object generated by the parsing of the conf.py file.
            key: Key to Search

        Returns:
            The name of the original theme as a string if found, otherwise "unknown".

        """
        for node in ast.walk(tree):
            if (
                isinstance(node, ast.Assign)
                and len(node.targets) == 1
                and isinstance(node.targets[0], ast.Name)
                and node.targets[0].id == key
            ) and isinstance(node.value, ast.List):
                elements = []
                for element_node in node.value.elts:
                    if isinstance(element_node, ast.Constant) and isinstance(
                        element_node.value, str
                    ):
                        elements.append(element_node.value)
                return elements
        return []

    def sphinx_change_conf(self, dev_mode: bool = False) -> None:
        """Patch sphinx configuration."""
        if self.doc_type != "sphinx":
            return
        conf_file = self.sphinx_conf_file
        conf_dir = self.sphinx_conf_file.parent
        static_dir = conf_dir / "_static"
        static_dir.mkdir(exist_ok=True)
        templates_dir = conf_dir / "_templates"
        templates_dir.mkdir(exist_ok=True)
        static_dir.mkdir(exist_ok=True)
        if dev_mode:
            shutil.copy(LIVE_RELOAD_JS_PATH, static_dir / "live_reload.js")
            shutil.copy(SPHINX_LAYOUT_TEMPLATE_PATH, templates_dir / "layout.html")
            with self.sphinx_conf_file.open("r", encoding="utf-8") as f:
                lines = f.readlines()
            path = DEVILDEX_THEMING_ASSETS_PATH.parent.resolve()
            devil_config = [
                "\n# --- DevilDex Theme Configuration ---",
                "import os",
                "import sys",
                f"sys.path.insert(0, r'{self.project_path.resolve()!s}')",
                f"sys.path.insert(0, r'{path!s}')",
                "html_theme = 'devildex_sphinx_theme'",
                "html_theme_path = [os.path.abspath(os.path.dirname('devildex_sphinx_theme'))]",
                "templates_path = ['_templates']",
                "html_js_files = ['live_reload.js']",
                "# --- End DevilDex Theme Configuration ---\n",
            ]
            with self.sphinx_conf_file.open("w", encoding="utf-8") as f:
                f.writelines(lines)
                f.write("\n".join(devil_config))
        shutil.copytree(
            Path(self.settings["html_theme_path"][0])
            / self.settings["html_theme"]
            / "static",
            static_dir,
            dirs_exist_ok=True,
        )
        if not conf_file or not conf_file.is_file():
            conf_file = next(
                (p for p in self.potential_sphinx_conf_paths if p.is_file()), None
            )
        with open(conf_file, encoding="utf-8") as f:
            source_code = f.read()
        tree = ast.parse(source_code, filename=str(conf_file))
        values_context = {
            "original_theme_name": self._get_value_from_ast(tree, "html_theme"),
            "extensions": self._get_list_from_ast(tree, "extensions"),
        }
        for var, value in self.settings.items():
            var_found = False
            for node in tree.body:
                if (
                    isinstance(node, ast.Assign)
                    and len(node.targets) == 1
                    and isinstance(node.targets[0], ast.Name)
                    and node.targets[0].id == var
                ):
                    if isinstance(value, str):
                        node.value = ast.Constant(value=value)
                        var_found = True
                        break
                    node.value = ast.List(
                        elts=[ast.Constant(value=s) for s in value], ctx=ast.Load()
                    )
                    var_found = True
                    break
            if not var_found:
                if isinstance(value, str):
                    new_assignment = ast.Assign(
                        targets=[ast.Name(id=var, ctx=ast.Store())],
                        value=ast.Constant(value=value),
                    )
                    tree.body.append(new_assignment)
                else:
                    new_assignment = ast.Assign(
                        targets=[ast.Name(id=var, ctx=ast.Store())],
                        value=ast.List(
                            elts=[ast.Constant(value=s) for s in value], ctx=ast.Load()
                        ),
                    )
                    tree.body.append(new_assignment)

        self._apply_sphinx_html_context(tree, values_context)

        ast.fix_missing_locations(tree)
        Path(conf_file).write_text(ast.unparse(tree), encoding="utf-8")

    @staticmethod
    def _apply_sphinx_html_context(tree: ast.AST, values_context: dict) -> None:
        html_context_found = False
        for node in tree.body:
            if (
                isinstance(node, ast.Assign)
                and len(node.targets) == 1
                and isinstance(node.targets[0], ast.Name)
                and node.targets[0].id == "html_context"
            ):
                if isinstance(node.value, ast.Dict):
                    for key_to_add, value_to_add in values_context.items():
                        node.value.keys.append(ast.Constant(value=key_to_add))
                        if isinstance(value_to_add, list):
                            list_node = ast.List(
                                elts=[ast.Constant(s) for s in value_to_add],
                                ctx=ast.Load(),
                            )
                            node.value.values.append(list_node)
                        else:
                            node.value.values.append(ast.Constant(value=value_to_add))
                html_context_found = True
                break

        if not html_context_found:
            keys_for_dict = []
            values_for_dict = []
            for key, value in values_context.items():
                keys_for_dict.append(ast.Constant(value=key))
                if isinstance(value, list):
                    list_node = ast.List(
                        elts=[ast.Constant(s) for s in value], ctx=ast.Load()
                    )
                    values_for_dict.append(list_node)
                else:
                    values_for_dict.append(ast.Constant(value=value))

            new_node = ast.Assign(
                targets=[ast.Name(id="html_context", ctx=ast.Store())],
                value=ast.Dict(keys=keys_for_dict, values=values_for_dict),
            )
            tree.body.append(new_node)
